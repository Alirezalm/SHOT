SomInstallation instructions for SHOT

Updated June 26th, 2018.

SHOT has been tested to compile on Linux. It may also be possible to compile it on Windows 
using e.g. the MSYS2 (https://www.msys2.org)  compitability layer, however this has not been 
fully tested.

Prerequisites:

-   SHOT requires that a relatively new version (newer than version 2.10) of the Optimization 
    Services (OS) libraries are available on the system. Note that the trunk version is under 
    active development and may not be completely stable. Instructions for obtaining and installing 
    OS can be found at https://projects.coin-or.org/OS. Some instructions are also available at
    https://github.com/coin-or/SHOT/wiki/Compile-Optimization-Services

-   A version of the Boost libraries (https://www.boost.org/) needs to be installed on the system. 


Main installation:

1.  Download the source code from the repository. 

2.  SHOT utilizes the CMake build system, and the main configuration for the build system
    can be found in the CMakeLists.txt file in the SHOT directory. Update the settings in
    the beginning of the file to suit your system.

    2.1 If you wish to compile with support for CPLEX and/or Gurobi, please set the 
        corresponding switches (HAS_CPLEX, HAS_GUROBI). You will also need to provide the 
        location of their main installation folders. For Gurobi you will also need to make
        sure to link to the correct library (e.g. libgurobi75.so for the 7.5 version).

        If you have at least version 12.8 of CPLEX, you can also set the 
        switch HAS_CPLEX_NEW_CALLBACK to activate the new type of callback functionality
        in CPLEX.
    
    2.2 If you have GAMS installed, you can activate this as well using the switch HAS_GAMS.
        
        In this case you can use GAMS NLP solvers within SHOT instead of Ipopt, but it is also
        possible to call SHOT directly from GAMS, but then you need to also call one of the 
        scripts available in the misc-folder to install SHOT in GAMS. See the scripts for 
        instructions on how to use them.

3.  Go into the build folder (or wherever you want to build SHOT) and execute the command

        cmake -G"Unix Makefiles" -DCMAKE_BUILD_TYPE=<TYPE> <PATH>
    
    where you substitute:
    
    <TYPE> with either 'Release' or 'Debug' depending on whether you will need debug 
    functionality. Normally this will be 'Release'

    <PATH> with the path to the main SHOT source folder you downloaded in step 1.

    The cmake command can vary depending on your needs, but the one mentioned above should
    work on Unix-based systems.

4.  If CMake finishes without errors you can build the program by executing the command 'make'.

5.  If compilation finishes without problems, you will have a binary called SHOT in your 
    current directory.

6.  If you want to run the automated tests after compilation, make sure that you have enabled
    the switch COMPILE_TESTS in the CMakeLists.txt file. After this you can execute the command
    'make test' to check if SHOT is functioning as planned.    


Usage instructions:

To solve problems using SHOT, the following syntax can be used:

    ./SHOT problem_file.osil

to solve the problem specified in the file 'problem_file.osil'. The filesuffix should be either 
.xml or .osil for OSiL-files, .nl for files in Ampl, or .gms for files in GAMS syntax. Note
that to be able to read GAMS files, you need to have GAMS installed and SHOT compiled with
support for it, c.f. 2.2 above. A few test problems are included in the 'test/data' directory, 
and more problems can be downloaded from MINLPLIB (http://www.minlplib.org).

SHOT will then create default options files 'options.opt' and 'options.xml' in the runtime directory; 
the solver parameters are documented in the options files themselves.

After the problem has been solved, it will give the solution in the file 'problem_file.osrl'.

If you want to change some options, you can edit either 'options.opt' and 'options.xml' save it and call

    ./SHOT problem_file.osil options.opt
